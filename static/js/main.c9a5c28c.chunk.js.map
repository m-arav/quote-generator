{"version":3,"sources":["component/card.js","App.js","util/quoteFetcher.js","serviceWorker.js","index.js"],"names":["Card","props","state","isLoading","author","quote","index","updateQuote","bind","getRndInteger","setInterval","this","min","max","Math","floor","random","quotes","JSON","parse","window","localStorage","getItem","length","setState","className","React","Component","App","style","background","backgroundSize","a","fetch","then","response","json","data","setItem","stringify","quoteFetcher","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RA2CeA,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAW,EACXC,OAAQ,KACRC,MAAO,KACPC,MAAO,MAGT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAVJ,E,gEAcjBE,YAAYC,KAAKJ,YAAa,O,oCAGlBK,EAAKC,GACjB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAOA,I,oCAItD,IAAMK,EAASC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,WAChDhB,EAAQK,KAAKF,cAAc,EAAGQ,EAAOM,QAF/B,EAGYN,EAAOX,GAAxBF,EAHK,EAGLA,OAAQC,EAHH,EAGGA,MACfM,KAAKa,UAAS,SAAAtB,GAAK,MAAK,CACtBC,WAAW,EACXC,OAAQA,EACRC,MAAOA,EACPC,MAAOA,Q,+BAKT,OACA,uBAAGmB,UAAW,QAAd,UAA2Bd,KAAKT,MAAMC,UAAY,OAAQQ,KAAKT,MAAMG,Y,GApCtDqB,IAAMC,W,MCgBVC,MAdf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,aAAaI,MAAO,CACpCC,WAAY,iFACZC,eAAgB,UAGhB,kBAAC,EAAD,S,mECZR,4BAAAC,EAAA,6DACQX,EAAeD,OAAOC,aAD9B,SAEQY,MAAM,0IACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIhB,EAAaiB,QAAQ,SAAUpB,KAAKqB,UAAUF,EAAI,YAJlE,4C,sBAOeG,M,2CCKKC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAG1BT,IDqHM,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9a5c28c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      author: null,\n      quote: null,\n      index: null\n    };\n\n    this.updateQuote = this.updateQuote.bind(this);\n    this.getRndInteger = this.getRndInteger.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateQuote, 5000);\n  }\n\n  getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n  }\n\n  updateQuote() {\n    const quotes = JSON.parse(window.localStorage.getItem('quotes'));\n    const index = this.getRndInteger(0, quotes.length);\n    const {author, quote} = quotes[index];\n    this.setState(state => ({\n      isLoading: false,\n      author: author,\n      quote: quote,\n      index: index\n    }))\n  }\n\n  render() {\n    return (\n    <p className={'card'}>{`${ this.state.isLoading ? '....': this.state.quote }`}</p>\n    )\n  }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './component/card';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{\n        background: 'url(https://source.unsplash.com/random/1600x900) no-repeat center center fixed',\n        backgroundSize: 'cover'\n      }}\n      >\n        <Card />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","async function quoteFetcher() {\n  const localStorage = window.localStorage;\n  await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n  .then(response => response.json())\n  .then(data => localStorage.setItem('quotes', JSON.stringify(data['quotes'])));\n}\n\nexport default quoteFetcher;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport quoteFetcher from './util/quoteFetcher'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nquoteFetcher();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}